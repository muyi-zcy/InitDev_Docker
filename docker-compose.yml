version: '3'
services:
  redis:
    image: redis:5.0.0
    container_name: redis
    command: redis-server --requirepass devRedisPasswd --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - /root/data/redis/data:/data
      - /root/data/redis/redis.conf:/etc/redis/redis.conf
    restart: "always"
    networks:
      - my_net
  mysql:
    image: nacos/nacos-mysql:8.0.16
    restart: "always"
    networks:
      - my_net
    container_name: mysql_db
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      - TZ=Asia/Shanghai
      - MYSQL_ROOT_PASSWORD=devMysqlPasswd
      - MYSQL_DATABASE=nacos_config
      - MYSQL_USER=nacos
      - MYSQL_PASSWORD=nacos
    ports:
      - '3306:3306'
    volumes:
      - /root/data/mysql/data/db:/var/lib/mysql
      - /root/data/mysql/data/conf:/etc/mysql/conf.d
  zookeeper:
    image: zookeeper
    restart: always
    networks:
      - my_net
    container_name: zookeeper
    privileged: true
    volumes:
      - /root/data/zk/config:/conf
      - /root/data/zk/data:/data
      - /root/data/zk/logs:/datalog
    ports: 
      - "2181:2181"
  dubbo-admin:
    image: apache/dubbo-admin
    container_name: dubbo-admin
    # 等待zk启动后再启动
    depends_on:
      - zookeeper
    ports:
      - 8080:8080
    networks:
      - my_net
    environment:
      - admin.registry.address=zookeeper://zookeeper:2181
      - admin.config-center=zookeeper://zookeeper:2181
      - admin.metadata-report.address=zookeeper://zookeeper:2181
  nacos:
    image: nacos/nacos-server:2.0.0
    container_name: nacos
    hostname: nacos
    env_file:
      - ./nacos/nacos-standlone-mysql.env
    environment:
      - TZ=Asia/Shanghai
    volumes:
      - /root/data/nacos/logs/:/home/nacos/logs
      - /root/data/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties
    ports:
      - 8848:8848
      - 9555:9555
      - 9848:9848
      - 9849:9849
    depends_on:
      - mysql
    restart: always
    networks:
      - my_net

  rocketmq-server:
    image: foxiswho/rocketmq:server
    container_name: rocketmq-server
    ports:
      - 9876:9876
    volumes:
      - /root/data/rocketmq/server/logs:/opt/logs
      - /root/data/rocketmq/server/store:/opt/store
    networks:
      - my_net

  rocketmq-broker:
    image: foxiswho/rocketmq:broker
    container_name: rocketmq-broker
    ports:
      - 10909:10909
      - 10911:10911
    volumes:
      - /root/data/rocketmq/broker/logs:/opt/logs
      - /root/data/rocketmq/broker/store:/opt/store
      - /root/data/rocketmq/broker/conf/broker.conf:/etc/rocketmq/broker.conf
    environment:
      NAMESRV_ADDR: "rocketmq-server:9876"
      JAVA_OPTS: " -Duser.home=/opt"
      JAVA_OPT_EXT: "-server -Xms128m -Xmx128m -Xmn128m"
    command: mqbroker -c /etc/rocketmq/broker.conf
    depends_on:
      - rocketmq-server
    networks:
      - my_net

  rocketmq-console:
    image: styletang/rocketmq-console-ng
    container_name: rocketmq-console
    ports:
      - 18080:8080
    environment:
      JAVA_OPTS: "-Drocketmq.namesrv.addr=rocketmq-server:9876 -Dcom.rocketmq.sendMessageWithVIPChannel=false"
    depends_on:
      - rocketmq-server
    networks:
      - my_net

  sentinel:
    image: bladex/sentinel-dashboard:1.8.0
    container_name: sentinel
    hostname: sentinel
    ports:
      - 8858:8858
    environment:
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - my_net
  seata:
    image: seataio/seata-server:1.4.1
    container_name: seata
    hostname: server
    ports:
      - 8091:8091
    environment:
      - SEATA_PORT=8091
      - TZ=Asia/Shanghai
      - STORE_MODE=file
      - SEATA_CONFIG_NAME=file:/seata-server/resources/registry
    volumes:
      - /root/data/seata/config:/root/seata-config
      - /root/data/seata/resources/registry.conf:/seata-server/resources/registry.conf
    depends_on:
      - mysql
      - nacos
    restart: always
    networks:
      - my_net

  minio:
    image: minio/minio
    container_name: minio
    hostname: minio
    ports:
      - 9000:9000 # api 端口
      - 9001:9001 # 控制台端口
    environment:
      MINIO_ACCESS_KEY: admin    #管理后台用户名
      MINIO_SECRET_KEY: zcy_nemo@aliyun.com #管理后台密码，最小8个字符
    volumes:
      - /root/data/minio/data:/data               #映射当前目录下的data目录至容器内/data目录
      - /root/data/minio/config:/root/.minio/     #映射配置目录
    command: server --console-address ':9001' /data  #指定容器中的目录 /data
    privileged: true
    restart: always
    networks:
      - my_net

  xxl-job-admin:
    image: xuxueli/xxl-job-admin:2.3.0
    container_name: xxl-job-admin
    environment:
      PARAMS: "--spring.datasource.url=jdbc:mysql://mysql:3306/xxl_job?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true&serverTimezone=Asia/Shanghai
                 --spring.datasource.username=root
                 --spring.datasource.password=devMysqlPasswd
                 --server.servlet.context-path=/xxl-job-admin
                 --xxl.job.accessToken="
    ports:
      - "9003:8080"
    restart: always
    networks:
      - my_net
  elasticsearch:
    image: elasticsearch:6.8.18
    container_name: elasticsearch
    restart: always
    ports:
      - 9200:9200
    networks:
      - my_net
  kibana:
    image: kibana:6.8.18
    container_name: kibana
    restart: always
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
      - 5601:5601
    networks:
      - my_net
  pilot:
    image: registry.cn-hangzhou.aliyuncs.com/acs-sample/log-pilot:0.9.5-filebeat
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/host
    privileged: true
    environment:
      LOGGING_OUTPUT: elasticsearch
      ELASTICSEARCH_HOST: elasticsearch
      ELASTICSEARCH_PORT: 9200
    networks:
      - my_net
networks:
  my_net:
    external:
      name: my_net